{"version":3,"sources":["contexts/context.js","utils/constants.js","utils/api.js","components/Login.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Sorting.js","components/Pagination.js","components/Main.js","components/AppRouter.js","components/NavBar.js","components/App.js","index.js"],"names":["AppContext","createContext","requestParams","localStorage","getItem","baseUrl","headers","userName","Api","this","_baseUrl","_headers","_userName","res","ok","json","Promise","reject","Error","status","pageNumber","sortField","sortDirection","a","sortOptions","fetch","method","_getResponseData","username","email","text","formData","FormData","append","body","id","token","api","Login","className","Task","message","style","href","TaskList","tasks","map","task","TaskForm","onSubmit","useState","setEmail","setUsername","setMessage","showForm","setShowForm","isNameValid","setIsNameValid","isEmailValid","setIsEmailValid","nameValidationMessage","setNameValidationMessage","emailValidationMessage","setEmailValidationMessage","isProfileFormValid","setIsProfileFormValid","useEffect","onClick","evt","preventDefault","target","reset","name","type","minLength","maxLength","value","onChange","checkValidity","validationMessage","required","disabled","Sorting","useContext","setSortField","setSortDirection","e","Pagination","taskTotal","setPageNumber","Main","header","AppRouter","path","exac","component","NavBar","to","App","isAuth","setIsAuth","tasksLength","setTasksLength","taskMessage","setTaskMessage","taskList","setTaskList","getTasks","then","answer","length","Number","total_task_count","catch","err","console","log","Provider","createTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb184f8d.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst AppContext = createContext(null);\r\n\r\nexport default AppContext;\r\n","const token = localStorage.getItem('token');\r\n/* eslint-disable */\r\nconst jwtToken = token ? token : '';\r\nconst USER_NAME = '/?developer=sumere4ny';\r\n\r\n/* eslint-disable */\r\n\r\nconst requestParams = {\r\n  baseUrl: \"https://uxcandy.com/~shapoval/test-task-backend/v2\",\r\n  headers: {\r\n    // \"Mime-Type\": \"multipart/form-data\",\r\n    // \"Authorization\": jwtToken,\r\n  },\r\n  userName: USER_NAME,\r\n};\r\n\r\nexport default requestParams;\r\n","import requestParams from './constants';\r\n\r\nclass Api {\r\n  constructor({ baseUrl, headers, userName }) {\r\n    /* eslint-disable */\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n    this._userName = userName;\r\n  }\r\n\r\n  // Общий обработчик запросов\r\n  _getResponseData(res) {\r\n    if (!res.ok) {\r\n      return Promise.reject(new Error(`Ошибка: ${res.status}`));\r\n    }\r\n    return res.json();\r\n  }\r\n\r\n  // Получаем массив уже существующих задач\r\n  async getTasks(pageNumber, sortField, sortDirection) {\r\n    let sortOptions = sortField\r\n      ? `&sort_field=${sortField}` + `&sort_direction=${sortDirection}`\r\n      : '';\r\n    const res = await fetch(this._baseUrl + this._userName + `&page=${pageNumber}` + sortOptions, {\r\n      headers: this._headers,\r\n      method: 'GET',\r\n    });\r\n    return this._getResponseData(res);\r\n  }\r\n\r\n  // Создание и изменение задачи\r\n  async createTask({ username, email, text }) {\r\n    const formData = new FormData();\r\n    formData.append('username', username);\r\n    formData.append('email', email);\r\n    formData.append('text', text);\r\n    const res = await fetch(`${this._baseUrl}/create${this._userName}`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: formData,\r\n    });\r\n    return this._getResponseData(res);\r\n  }\r\n\r\n  async changeTask({ id, text, status, token }) {\r\n    const formData = new FormData();\r\n    formData.append('status', status);\r\n    formData.append('token', token);\r\n    formData.append('text', text);\r\n    const res = await fetch(`${this._baseUrl}/edit/${id}`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: formData,\r\n    });\r\n    return this._getResponseData(res);\r\n  }\r\n}\r\n\r\nexport const api = new Api(requestParams);\r\n","function Login() {\r\n  return (\r\n    <main className=\"content\">\r\n      <h1>Login</h1>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","function Task({ username, message, email }) {\r\n  /* eslint-disable */\r\n  return (\r\n    <div className=\"tasklist__task\">\r\n      <h2 style={{ 'textAlign': 'center' }}>Имя пользователя: {username}</h2>\r\n      <p>Email: <a href={`mailto: ${email}`}>{email}</a></p>\r\n      <p>Описание</p>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import Task from './Task';\r\n\r\nfunction TaskList({ tasks }) {\r\n  return (\r\n    <>\r\n      {tasks.map((task) => <Task\r\n      username={task.username}\r\n      message={task.text}\r\n      email={task.email}\r\n      key={task.id} />)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction TaskForm({ onSubmit }) {\r\n  const [email, setEmail] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [isNameValid, setIsNameValid] = useState(true);\r\n  const [isEmailValid, setIsEmailValid] = useState(true);\r\n  const [nameValidationMessage, setNameValidationMessage] = useState('');\r\n  const [emailValidationMessage, setEmailValidationMessage] = useState('');\r\n  const [isProfileFormValid, setIsProfileFormValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    function checkProfileFormValidity() {\r\n      if (isNameValid && isEmailValid && username && email) {\r\n        setIsProfileFormValid(true);\r\n      } else {\r\n        setIsProfileFormValid(false);\r\n      }\r\n    }\r\n    checkProfileFormValidity();\r\n  }, [username, email, isNameValid, isEmailValid]);\r\n\r\n  useEffect(() => {\r\n    if (showForm) {\r\n      setNameValidationMessage('');\r\n      setEmailValidationMessage('');\r\n      setIsNameValid(true);\r\n      setIsEmailValid(true);\r\n    }\r\n  }, [showForm]);\r\n\r\n  function handleNameChange(evt) {\r\n    setUsername(evt.target.value);\r\n    setIsNameValid(evt.target.checkValidity());\r\n    setNameValidationMessage(evt.target.validationMessage);\r\n  }\r\n\r\n  function handleEmailChange(evt) {\r\n    setEmail(evt.target.value);\r\n    setIsEmailValid(evt.target.checkValidity());\r\n    setEmailValidationMessage(evt.target.validationMessage);\r\n  }\r\n\r\n  function handleMessageChange(evt) {\r\n    setMessage(evt.target.value);\r\n  }\r\n\r\n  function handleShowForm() {\r\n    setShowForm(!showForm);\r\n  }\r\n\r\n  function hanleClearInputs() {\r\n    setEmail('');\r\n    setUsername('');\r\n    setMessage('');\r\n  }\r\n\r\n  function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    if (!(username || email)) {\r\n      return;\r\n    }\r\n    onSubmit({\r\n      email,\r\n      username,\r\n      text: message,\r\n    });\r\n    hanleClearInputs();\r\n    evt.target.reset();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"button__show-form\"\r\n        onClick={handleShowForm}>{showForm ? 'Скрыть форму' : 'Добавить задание'}</div>\r\n      <form className={`task__form ${showForm && 'task__form_visible'}`} onSubmit={handleSubmit}>\r\n        <label>Имя пользователя</label>\r\n        <input\r\n          name=\"username\"\r\n          id=\"username\"\r\n          type=\"text\"\r\n          minLength=\"2\"\r\n          maxLength=\"20\"\r\n          value={username}\r\n          onChange={handleNameChange}\r\n          required />\r\n        <span id='username-error' className='task__form_input-error'>{nameValidationMessage}</span>\r\n        <label>E-mail</label>\r\n        <input\r\n          name=\"email\"\r\n          id=\"email\"\r\n          type=\"email\"\r\n          minLength=\"5\"\r\n          maxLength=\"20\"\r\n          value={email}\r\n          onChange={handleEmailChange}\r\n          required />\r\n        <span id='email-error' className='task__form_input-error'>{emailValidationMessage}</span>\r\n        <label>Сообщение</label>\r\n        <textarea name=\"message\" type=\"text\" onChange={handleMessageChange} />\r\n        <button className=\"task__submit\" type=\"submit\"\r\n          value={message} disabled={!isProfileFormValid}>Создать</button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskForm;\r\n","import { useContext } from 'react';\r\nimport AppContext from '../contexts/context';\r\n\r\nconst Sorting = () => {\r\n  const { setSortField, setSortDirection } = useContext(AppContext);\r\n\r\n  return (\r\n    <div className=\"sort\">\r\n      <div>Сортировать</div>\r\n      <select\r\n        onChange={(e) => setSortField(e.target.value)}\r\n      >\r\n        <option value=\"id\">id</option>\r\n        <option value=\"username\">username</option>\r\n        <option value=\"email\">email</option>\r\n        <option value=\"status\">status</option>\r\n      </select>\r\n      <select\r\n        onChange={(e) => setSortDirection(e.target.value)}\r\n      >\r\n        <option value=\"asc\">По возрастанию</option>\r\n        <option value=\"desc\">По убыванию</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sorting;\r\n","import { useContext } from 'react';\r\nimport AppContext from '../contexts/context';\r\n\r\nconst Pagination = ({ taskTotal }) => {\r\n  const { pageNumber, setPageNumber } = useContext(AppContext);\r\n\r\n  if (taskTotal <= 3) return null;\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <button\r\n        onClick={() => setPageNumber(pageNumber - 1)}\r\n        disabled={pageNumber === 1}\r\n      >\r\n        Назад\r\n      </button>\r\n      <div>Страница {pageNumber}</div>\r\n      <button\r\n        onClick={() => setPageNumber(pageNumber + 1)}\r\n        disabled={pageNumber * 3 >= taskTotal}\r\n      >\r\n        Дальше\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import TaskList from './TaskList';\r\nimport TaskForm from './TaskForm';\r\nimport Sorting from './Sorting';\r\nimport Pagination from './Pagination';\r\n\r\nconst Main = ({\r\n  tasks,\r\n  taskTotal,\r\n  header,\r\n  onSubmit,\r\n}) => (\r\n    <main className=\"main\">\r\n      <div className=\"main__content\">\r\n        <h1>{header}</h1>\r\n        <Sorting />\r\n        <TaskList tasks={tasks} />\r\n        <Pagination taskTotal={taskTotal} />\r\n      </div>\r\n      <div className=\"main__sidebar\">\r\n        <TaskForm onSubmit={onSubmit} />\r\n      </div>\r\n    </main>\r\n);\r\n\r\nexport default Main;\r\n","import { Switch, Route } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Main from './Main';\r\n\r\nconst AppRouter = ({\r\n  tasks,\r\n  taskTotal,\r\n  onSubmit,\r\n  header,\r\n}) => (\r\n      <Switch>\r\n        <Route path=\"/\" exac>\r\n          <Main\r\n            tasks={tasks}\r\n            taskTotal={taskTotal}\r\n            onSubmit={onSubmit}\r\n            header={header}\r\n          />\r\n        </Route>\r\n        <Route path=\"/login\" component={ Login } />\r\n      </Switch>\r\n);\r\n\r\nexport default AppRouter;\r\n","import { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav className=\"navigation__bar\">\r\n      <Link className=\"navigation__link\" to=\"/\">Задачи</Link>\r\n      {/* <Link className=\"navigation__link\" to=\"/create\">Создать задачу</Link> */}\r\n      <Link className=\"navigation__link\" to=\"/login\">Войти</Link>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport AppContext from '../contexts/context';\r\nimport { api } from '../utils/api';\r\nimport AppRouter from './AppRouter';\r\nimport NavBar from './NavBar';\r\n\r\n/* eslint-disable */\r\n\r\nfunction App() {\r\n  const [isAuth, setIsAuth] = useState(false);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [sortField, setSortField] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState(null);\r\n  const [tasksLength, setTasksLength] = useState(0);\r\n  const [taskMessage, setTaskMessage] = useState('');\r\n  const [taskList, setTaskList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api.getTasks(pageNumber, sortField, sortDirection)\r\n      .then((answer) => {\r\n        if (answer.status == 'ok') {\r\n          setTaskList([...answer.message.tasks]);\r\n          setTaskMessage(answer.message.tasks.length ? 'Список задач:' : 'Задач пока нет!');\r\n          setTasksLength(Number(answer.message.total_task_count));\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  }, [pageNumber, tasksLength, sortField, sortDirection]);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('token')) {\r\n      setIsAuth(true);\r\n    }\r\n  }, []);\r\n\r\n  function handleTaskSubmit(task) {\r\n    console.log(task);\r\n    setTaskList([...taskList, task]);\r\n    api.createTask(task)\r\n    .then((answer) => {\r\n      console.log(answer.message);\r\n      if (answer.status == 'ok') {\r\n        setTasksLength(tasksLength + 1);\r\n      } else {\r\n        setTaskMessage('Ошибка добавления');\r\n      }\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider value={{\r\n      isAuth,\r\n      setIsAuth,\r\n      pageNumber,\r\n      setPageNumber,\r\n      setSortField,\r\n      setSortDirection,\r\n    }}>\r\n      <NavBar />\r\n      <AppRouter\r\n        tasks={taskList}\r\n        taskTotal={tasksLength}\r\n        onSubmit={handleTaskSubmit}\r\n        header={taskMessage} />\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}